<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>

<#@include file="Manager.tt"#> 
<#@include file="DBSql.tt"#>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
using System;
using System.Collections.Generic;
using System.Data.Entity.ModelConfiguration;
namespace PM.Base
{   
<# manager.EndBlock(); #>

<#        
    SqlConnection conn = new SqlConnection(connectionString);
    conn.Open();
    
    string selectQuery ="SET FMTONLY ON; select * from @tableName; SET FMTONLY OFF;";
    SqlCommand command = new SqlCommand(selectQuery,conn);
    SqlDataAdapter ad = new SqlDataAdapter(command);
    System.Data.DataSet ds = new DataSet(); 
   
	var schema = GetSchema();
    foreach(System.Data.DataRow row in schema)
    {    
        ds.Tables.Clear();
        string tb_name = row["TABLE_NAME"].ToString();        
        command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
        ad.FillSchema(ds,SchemaType.Mapped,tb_name);  
        manager.StartNewFile(tb_name+"EntityMap.cs");
#>
    /// <summary>
    /// 实体-<#=tb_name#> 
    /// </summary>
    public partial class <#=tb_name#>EntityMap : EntityTypeConfiguration<<#=tb_name#>Entity>
    {    
		public <#=tb_name#>EntityMap()
		{
			// Primary Key
			<#
			foreach (DataColumn dc in ds.Tables[0].PrimaryKey) 
			{
				WriteLine("this.HasKey(t => t." + dc.ColumnName +");");
			}
			#>

			// Properties
			<#
			var index = 0;
			foreach (DataColumn dc in ds.Tables[0].Columns) 
			{
				if(!ds.Tables[0].PrimaryKey.Contains(dc))
				{
					if(index > 0)
					{
						Write("			");
					}
					Write("this.Property(t => t." + dc.ColumnName +")");
					if(!dc.AllowDBNull)
					{
						Write(@".IsRequired()");
					}

					if(dc.MaxLength > 0)
					{
						Write(@".HasMaxLength(" + dc.MaxLength + ")");
					}

					WriteLine(@";
					");

					index++;
				}
			}
			#>

			// Table & Column Mappings
			<#
			
			WriteLine("this.ToTable(\""+ tb_name +"\");");

			foreach (DataColumn dc in ds.Tables[0].Columns) 
			{
				Write("			");

				WriteLine(@"this.Property(t => t." + dc.ColumnName +").HasColumnName(\"" + dc.ColumnName + "\");");
			}
			#>
		}
        
    } 
<#
        manager.EndBlock();    
    }            
    conn.Close();  
#>



<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>